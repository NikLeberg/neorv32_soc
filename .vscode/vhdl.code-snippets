{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "VHDL library": {
        "scope": "vhdl",
        "prefix": [
            "library",
            "lib"
        ],
        "body": [
            "LIBRARY ieee;",
            "USE ieee.std_logic_1164.all;",
            "USE ieee.numeric_std.all;"
        ]
    },
    "VHDL entity": {
        "scope": "vhdl",
        "prefix": [
            "entity",
            "ent"
        ],
        "body": [
            "ENTITY ${1:${TM_FILENAME_BASE:entity}} IS",
            "\tPORT (",
            "\t\t${2:a} : IN STD_LOGIC;",
            "\t\t${3:b} : OUT STD_LOGIC;",
            "\t\t${4:y} : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)",
            "\t);",
            "END ENTITY $1;"
        ]
    },
    "VHDL architecture": {
        "scope": "vhdl",
        "prefix": [
            "architecture",
            "arch"
        ],
        "body": [
            "ARCHITECTURE no_target_specific OF ${1:${TM_FILENAME_BASE:entity}} IS",
            "\t$2",
            "BEGIN",
            "\t$3",
            "END ARCHITECTURE no_target_specific;"
        ]
    },
    "VHDL signal": {
        "scope": "vhdl",
        "prefix": [
            "signal",
            "s_",
            "sig",
            "sign" // to overwrite extension snippet
        ],
        "body": [
            "SIGNAL s_$1 : STD_LOGIC;"
        ]
    },
    "VHDL process": {
        "scope": "vhdl",
        "prefix": [
            "process",
            "proc",
            "pro"
        ],
        "body": [
            "${1:proc} : PROCESS (${2:clk_i}) IS",
            "BEGIN",
            "\tIF rising_edge(${2:clk_i}) THEN",
            "\t\tIF ${3:rstn_i = '0'} THEN",
            "\t\t\t$0",
            "\t\tELSE",
            "\t\t\t",
            "\t\tEND IF;",
            "\tEND IF;",
            "END PROCESS $1;"
        ]
    },
    "VHDL component": {
        "scope": "vhdl",
        "prefix": [
            "component",
            "comp"
        ],
        "body": [
            "COMPONENT ${1:${TM_FILENAME_BASE:entity}}",
            "\tPORT (",
            "\t\t${2:a} : IN STD_LOGIC;",
            "\t\t${3:b} : OUT STD_LOGIC;",
            "\t\t${4:y} : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)",
            "\t);",
            "END COMPONENT $1;",
        ]
    },
    "VHDL map": {
        "scope": "vhdl",
        "prefix": [
            "map",
            "instance",
            "inst"
        ],
        "body": [
            "${1:${TM_FILENAME_BASE:entity}}_1 : $1",
            "PORT MAP (",
            "\t${2:a} => $2,",
            "\t${3:b} => $3,",
            "\t${4:y} => $4",
            ");"
        ]
    }
}