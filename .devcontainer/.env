# Common arguments valid for all on-demand tools.
function get_common_args () {
    if [ -n "$GITHUB_ACTIONS" ]; then
        common_vols="--volume /home/runner/work:/__w"
        common_misc="--workdir $(pwd) --rm"
    elif [ -n "$CODESPACES" ]; then
        common_vols="--volume /workspaces:/workspaces"
        common_misc="--workdir $(pwd) --init --interactive --tty --rm"
    else
        common_vols="--volumes-from $(cat /proc/self/cgroup | head -n 1 | cut -d '/' -f3)"
        common_misc="--workdir $(pwd) --init --interactive --tty --rm"
    fi
    common_disp="--env=DISPLAY=:0 --volume=/tmp/.X11-unix/:/tmp/.X11-unix/"
    common_args="$common_vols $common_disp $common_misc"
    echo $common_args
}
export -f get_common_args

# Python interpreter, programming language.
function python () {
    python_args="--hostname python --entrypoint python $(get_common_args) -e LIBS -e LIB_PATHS -e IGNORED_FILES"
    docker run $python_args python:slim $*
}
export -f python
function python_bash () {
    python_args="--hostname python --entrypoint bash $(get_common_args)"
    docker run $python_args python:slim $*
}
export -f python_bash

# QuestaSim tool, simulation of HDL.
function vsim () {
    questa_args="--hostname questasim --mac-address=00:ab:ab:ab:ab:ab $(get_common_args)"
    docker run $questa_args ghcr.io/nikleberg/questasim $*
}
export -f vsim
function vcom () {
    questa_args="--hostname questasim --entrypoint vcom $(get_common_args)"
    docker run $questa_args ghcr.io/nikleberg/questasim $*
}
export -f vcom
function questa_make () {
    questa_args="--hostname questasim --mac-address=00:ab:ab:ab:ab:ab --entrypoint make $(get_common_args)"
    docker run $questa_args ghcr.io/nikleberg/questasim $*
}
export -f questa_make
function questa_bash () {
    questa_args="--hostname questasim --mac-address=00:ab:ab:ab:ab:ab --entrypoint bash $(get_common_args)"
    docker run $questa_args ghcr.io/nikleberg/questasim $*
}
export -f questa_bash

# Quartus tool(s), analysis & synthesis of HDL for Intel FPGAs.
# Note: Uses bash hook "not_found" to check for quartus* commands and executes
#       these inside the container.
# Note: The '--volume=/dev:/dev' and '--privileged' are to have access to
#       USB/JTAG devices and allow to program FPGAs.
function command_not_found_handle () {
    if [[ $1 =~ ^quartus.*$ ]]; then
        quartus_args="--hostname quartus --volume=/dev:/dev --privileged --entrypoint $1 $(get_common_args)"
        shift
        docker run $quartus_args ghcr.io/nikleberg/quartus $*
        return
    fi
    return 127 # not a quartus command
}
export -f command_not_found_handle
function quartus_make () {
    quartus_args="--hostname quartus --volume=/dev:/dev --privileged --entrypoint make $(get_common_args)"
    docker run $quartus_args ghcr.io/nikleberg/quartus $*
}
export -f quartus_make
function quartus_bash () {
    quartus_args="--hostname quartus --volume=/dev:/dev --privileged --entrypoint bash $(get_common_args)"
    docker run $quartus_args ghcr.io/nikleberg/quartus $*
}
export -f quartus_bash

# Make & GCC for Host + RISC-V cross-compiler.
function riscv32-unknown-elf-gcc () {
    riscv_args="--hostname riscv-gcc --entrypoint riscv32-unknown-elf-gcc $(get_common_args)"
    docker run $riscv_args ghcr.io/nikleberg/riscv-gcc:13.2-rv32i $*
}
export -f riscv32-unknown-elf-gcc
function openocd () {
    riscv_args="--hostname riscv-gcc --entrypoint openocd $(get_common_args)"
    docker run $riscv_args ghcr.io/nikleberg/riscv-gcc:13.2-rv32i $*
}
export -f openocd
function riscv_make () {
    riscv_args="--hostname riscv-gcc --entrypoint make $(get_common_args)"
    docker run $riscv_args ghcr.io/nikleberg/riscv-gcc:13.2-rv32i $*
}
export -f riscv_make
function riscv_bash () {
    riscv_args="--hostname riscv-gcc --entrypoint bash $(get_common_args)"
    docker run $riscv_args ghcr.io/nikleberg/riscv-gcc:13.2-rv32i $*
}
export -f riscv_bash

# OSS tools for HDL verification.
function ghdl () {
    oss_args="--hostname oss --entrypoint ghdl $(get_common_args)"
    docker run $oss_args gcr.io/hdl-containers/formal $*
}
export -f ghdl
function sby () {
    oss_args="--hostname oss --entrypoint sby $(get_common_args)"
    docker run $oss_args gcr.io/hdl-containers/formal $*
}
export -f sby
function yosys () {
    oss_args="--hostname oss --entrypoint yosys $(get_common_args)"
    docker run $oss_args gcr.io/hdl-containers/formal $*
}
export -f yosys
function gtkwave () {
    oss_args="--hostname oss --entrypoint gtkwave $(get_common_args)"
    docker run $oss_args gcr.io/hdl-containers/gtkwave $*
}
export -f gtkwave
function oss_make () {
    oss_args="--hostname oss --entrypoint make $(get_common_args)"
    docker run $oss_args gcr.io/hdl-containers/formal $*
}
export -f oss_make
function oss_bash () {
    oss_args="--hostname oss --entrypoint bash $(get_common_args)"
    docker run $oss_args gcr.io/hdl-containers/formal $*
}
export -f oss_bash

# NVC, very fast VHDL simulator.
function nvc () {
    nvc_args="--hostname nvc $(get_common_args)"
    docker run $nvc_args ghcr.io/nikleberg/nvc $*
}
export -f nvc
function nvc_make () {
    nvc_args="--hostname nvc --entrypoint make $(get_common_args)"
    docker run $nvc_args ghcr.io/nikleberg/nvc $*
}
export -f nvc_make
function nvc_bash () {
    nvc_args="--hostname nvc --entrypoint bash $(get_common_args)"
    docker run $nvc_args ghcr.io/nikleberg/nvc $*
}
export -f nvc_bash
